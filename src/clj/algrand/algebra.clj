(ns algrand.algebra
    (:require [clojure.math.numeric-tower :as nt]))
;;; Code for learning about number theory and abstract algebra


(defn modcycle
  "Returns the integers generated by n (in generation order), from the
  multiplicative group with order m.  Stops when 1 or 0 is generated.
  (Doesn't actually compute full powers, but only multiplies by the
  previous result.)"
  [n m]
  (loop [a n
         acc []]
    (if (<= a 1)
      (conj acc a)
      (recur (mod (* a n) m)
             (conj acc a)))))


(defn modcycle3
  "Returns an infinite sequence of triples containing integers generated by n 
  (in generation order) followed the power of n to which each is
  congruent, and the exponent used to calculate the power."
  [n m]
  (map (fn [e] 
           (let [raised (nt/expt n e)]
             [(mod raised m) raised e]))
       (range)))
