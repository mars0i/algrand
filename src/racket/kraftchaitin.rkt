#lang racket


;; Toggle between printing numbers in binary and decimal format
(define (toggle-print)
  (if (equal? base-print (current-print))
    (current-print binary-print)
    (current-print base-print)))

(define base-print (current-print))

;; Based on code by Leif Andersen at
;; https://stackoverflow.com/a/59847051/1455243
;; But it won't recurse into structures.
(define (binary-print val)
  (if (number? val)
      (display (~r val #:base 2))
      (base-print val)))


;; Return a pair specifying bounds [x,y) of the Nies interval generated by
;; binary string s, e.g. "0110" for #b.0110 .
(define (interval-of bin-string)
  (let* ([len (string-length bin-string)]
	 [left-bound (string->number (string-append "#b." bin-string))])
    (if (zero? len)
      [#b0 #b1]
      (let* ([weight (expt 2.0 (- len))]
	     [right-bound (+ left-bound weight)])
	(list left-bound right-bound)))))
